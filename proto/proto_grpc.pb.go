// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChitChat_Connect_FullMethodName  = "/chitchat.ChitChat/Connect"
	ChitChat_Messages_FullMethodName = "/chitchat.ChitChat/Messages"
)

// ChitChatClient is the client API for ChitChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChitChatClient interface {
	Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConnectMessage, error)
	Messages(ctx context.Context, opts ...grpc.CallOption) (ChitChat_MessagesClient, error)
}

type chitChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatClient(cc grpc.ClientConnInterface) ChitChatClient {
	return &chitChatClient{cc}
}

func (c *chitChatClient) Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConnectMessage, error) {
	out := new(ConnectMessage)
	err := c.cc.Invoke(ctx, ChitChat_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatClient) Messages(ctx context.Context, opts ...grpc.CallOption) (ChitChat_MessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChitChat_ServiceDesc.Streams[0], ChitChat_Messages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chitChatMessagesClient{stream}
	return x, nil
}

type ChitChat_MessagesClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chitChatMessagesClient struct {
	grpc.ClientStream
}

func (x *chitChatMessagesClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chitChatMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChitChatServer is the server API for ChitChat service.
// All implementations must embed UnimplementedChitChatServer
// for forward compatibility
type ChitChatServer interface {
	Connect(context.Context, *Empty) (*ConnectMessage, error)
	Messages(ChitChat_MessagesServer) error
	mustEmbedUnimplementedChitChatServer()
}

// UnimplementedChitChatServer must be embedded to have forward compatible implementations.
type UnimplementedChitChatServer struct {
}

func (UnimplementedChitChatServer) Connect(context.Context, *Empty) (*ConnectMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedChitChatServer) Messages(ChitChat_MessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedChitChatServer) mustEmbedUnimplementedChitChatServer() {}

// UnsafeChitChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServer will
// result in compilation errors.
type UnsafeChitChatServer interface {
	mustEmbedUnimplementedChitChatServer()
}

func RegisterChitChatServer(s grpc.ServiceRegistrar, srv ChitChatServer) {
	s.RegisterService(&ChitChat_ServiceDesc, srv)
}

func _ChitChat_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).Connect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChat_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChitChatServer).Messages(&chitChatMessagesServer{stream})
}

type ChitChat_MessagesServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chitChatMessagesServer struct {
	grpc.ServerStream
}

func (x *chitChatMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chitChatMessagesServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChitChat_ServiceDesc is the grpc.ServiceDesc for ChitChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chitchat.ChitChat",
	HandlerType: (*ChitChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ChitChat_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messages",
			Handler:       _ChitChat_Messages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
